// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sync_mess.proto

#include "sync_mess.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_sync_5fmess_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DepositeFileHeader_sync_5fmess_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_sync_5fmess_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Header_sync_5fmess_2eproto;
namespace filesync {
class HeaderDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Header> _instance;
} _Header_default_instance_;
class DepositeFileHeaderDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DepositeFileHeader> _instance;
} _DepositeFileHeader_default_instance_;
class SyncPackageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SyncPackage> _instance;
} _SyncPackage_default_instance_;
}  // namespace filesync
static void InitDefaultsscc_info_DepositeFileHeader_sync_5fmess_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::filesync::_DepositeFileHeader_default_instance_;
    new (ptr) ::filesync::DepositeFileHeader();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::filesync::DepositeFileHeader::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DepositeFileHeader_sync_5fmess_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DepositeFileHeader_sync_5fmess_2eproto}, {}};

static void InitDefaultsscc_info_Header_sync_5fmess_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::filesync::_Header_default_instance_;
    new (ptr) ::filesync::Header();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::filesync::Header::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Header_sync_5fmess_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Header_sync_5fmess_2eproto}, {
      &scc_info_DepositeFileHeader_sync_5fmess_2eproto.base,}};

static void InitDefaultsscc_info_SyncPackage_sync_5fmess_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::filesync::_SyncPackage_default_instance_;
    new (ptr) ::filesync::SyncPackage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::filesync::SyncPackage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SyncPackage_sync_5fmess_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SyncPackage_sync_5fmess_2eproto}, {
      &scc_info_Header_sync_5fmess_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_sync_5fmess_2eproto[3];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_sync_5fmess_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_sync_5fmess_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_sync_5fmess_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::filesync::Header, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::filesync::Header, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::filesync::Header, type_),
  PROTOBUF_FIELD_OFFSET(::filesync::Header, command_),
  PROTOBUF_FIELD_OFFSET(::filesync::Header, headercontentlen_),
  PROTOBUF_FIELD_OFFSET(::filesync::Header, contenttype_),
  PROTOBUF_FIELD_OFFSET(::filesync::Header, depositefileheader_),
  PROTOBUF_FIELD_OFFSET(::filesync::Header, depositestateheader_),
  1,
  2,
  3,
  4,
  0,
  5,
  PROTOBUF_FIELD_OFFSET(::filesync::DepositeFileHeader, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::filesync::DepositeFileHeader, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::filesync::DepositeFileHeader, filename_),
  PROTOBUF_FIELD_OFFSET(::filesync::DepositeFileHeader, filelen_),
  PROTOBUF_FIELD_OFFSET(::filesync::DepositeFileHeader, curseqstart_),
  PROTOBUF_FIELD_OFFSET(::filesync::DepositeFileHeader, curseqend_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::filesync::SyncPackage, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::filesync::SyncPackage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::filesync::SyncPackage, len_),
  PROTOBUF_FIELD_OFFSET(::filesync::SyncPackage, header_),
  PROTOBUF_FIELD_OFFSET(::filesync::SyncPackage, contentlen_),
  PROTOBUF_FIELD_OFFSET(::filesync::SyncPackage, content_),
  2,
  1,
  3,
  0,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 11, sizeof(::filesync::Header)},
  { 17, 26, sizeof(::filesync::DepositeFileHeader)},
  { 30, 39, sizeof(::filesync::SyncPackage)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::filesync::_Header_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::filesync::_DepositeFileHeader_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::filesync::_SyncPackage_default_instance_),
};

const char descriptor_table_protodef_sync_5fmess_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\017sync_mess.proto\022\010filesync\"\215\002\n\006Header\022#"
  "\n\004type\030\001 \002(\0162\025.filesync.PackageType\022\"\n\007c"
  "ommand\030\002 \002(\0162\021.filesync.Command\022\030\n\020heade"
  "rContentLen\030\003 \002(\005\0220\n\013contentType\030\004 \002(\0162\033"
  ".filesync.HeaderContentType\0228\n\022depositeF"
  "ileHeader\030\005 \001(\0132\034.filesync.DepositeFileH"
  "eader\0224\n\023depositeStateHeader\030\006 \001(\0162\027.fil"
  "esync.DepositeState\"_\n\022DepositeFileHeade"
  "r\022\020\n\010fileName\030\001 \002(\t\022\017\n\007fileLen\030\002 \002(\003\022\023\n\013"
  "curSeqStart\030\003 \002(\003\022\021\n\tcurSeqEnd\030\004 \002(\003\"a\n\013"
  "SyncPackage\022\013\n\003len\030\001 \002(\003\022 \n\006header\030\002 \002(\013"
  "2\020.filesync.Header\022\022\n\ncontentLen\030\003 \002(\003\022\017"
  "\n\007content\030\004 \002(\014*%\n\013PackageType\022\n\n\006Client"
  "\020\000\022\n\n\006Server\020\001*N\n\007Command\022\017\n\013ClientHello"
  "\020\000\022\017\n\013ServerHello\020\001\022\020\n\014DepositeFile\020\002\022\017\n"
  "\013ReportState\020\003*P\n\021HeaderContentType\022\010\n\004N"
  "one\020\000\022\027\n\023DepositeFileContent\020\001\022\030\n\024Deposi"
  "teStateContent\020\002*4\n\rDepositeState\022\013\n\007Suc"
  "ceed\020\000\022\n\n\006Failed\020\001\022\n\n\006Paused\020\002"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_sync_5fmess_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_sync_5fmess_2eproto_sccs[3] = {
  &scc_info_DepositeFileHeader_sync_5fmess_2eproto.base,
  &scc_info_Header_sync_5fmess_2eproto.base,
  &scc_info_SyncPackage_sync_5fmess_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_sync_5fmess_2eproto_once;
static bool descriptor_table_sync_5fmess_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_sync_5fmess_2eproto = {
  &descriptor_table_sync_5fmess_2eproto_initialized, descriptor_table_protodef_sync_5fmess_2eproto, "sync_mess.proto", 750,
  &descriptor_table_sync_5fmess_2eproto_once, descriptor_table_sync_5fmess_2eproto_sccs, descriptor_table_sync_5fmess_2eproto_deps, 3, 0,
  schemas, file_default_instances, TableStruct_sync_5fmess_2eproto::offsets,
  file_level_metadata_sync_5fmess_2eproto, 3, file_level_enum_descriptors_sync_5fmess_2eproto, file_level_service_descriptors_sync_5fmess_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_sync_5fmess_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_sync_5fmess_2eproto)), true);
namespace filesync {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PackageType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_sync_5fmess_2eproto);
  return file_level_enum_descriptors_sync_5fmess_2eproto[0];
}
bool PackageType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Command_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_sync_5fmess_2eproto);
  return file_level_enum_descriptors_sync_5fmess_2eproto[1];
}
bool Command_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* HeaderContentType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_sync_5fmess_2eproto);
  return file_level_enum_descriptors_sync_5fmess_2eproto[2];
}
bool HeaderContentType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DepositeState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_sync_5fmess_2eproto);
  return file_level_enum_descriptors_sync_5fmess_2eproto[3];
}
bool DepositeState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void Header::InitAsDefaultInstance() {
  ::filesync::_Header_default_instance_._instance.get_mutable()->depositefileheader_ = const_cast< ::filesync::DepositeFileHeader*>(
      ::filesync::DepositeFileHeader::internal_default_instance());
}
class Header::_Internal {
 public:
  using HasBits = decltype(std::declval<Header>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_command(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_headercontentlen(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_contenttype(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::filesync::DepositeFileHeader& depositefileheader(const Header* msg);
  static void set_has_depositefileheader(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_depositestateheader(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

const ::filesync::DepositeFileHeader&
Header::_Internal::depositefileheader(const Header* msg) {
  return *msg->depositefileheader_;
}
Header::Header()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:filesync.Header)
}
Header::Header(const Header& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_depositefileheader()) {
    depositefileheader_ = new ::filesync::DepositeFileHeader(*from.depositefileheader_);
  } else {
    depositefileheader_ = nullptr;
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&depositestateheader_) -
    reinterpret_cast<char*>(&type_)) + sizeof(depositestateheader_));
  // @@protoc_insertion_point(copy_constructor:filesync.Header)
}

void Header::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Header_sync_5fmess_2eproto.base);
  ::memset(&depositefileheader_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&depositestateheader_) -
      reinterpret_cast<char*>(&depositefileheader_)) + sizeof(depositestateheader_));
}

Header::~Header() {
  // @@protoc_insertion_point(destructor:filesync.Header)
  SharedDtor();
}

void Header::SharedDtor() {
  if (this != internal_default_instance()) delete depositefileheader_;
}

void Header::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Header& Header::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Header_sync_5fmess_2eproto.base);
  return *internal_default_instance();
}


void Header::Clear() {
// @@protoc_insertion_point(message_clear_start:filesync.Header)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(depositefileheader_ != nullptr);
    depositefileheader_->Clear();
  }
  if (cached_has_bits & 0x0000003eu) {
    ::memset(&type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&depositestateheader_) -
        reinterpret_cast<char*>(&type_)) + sizeof(depositestateheader_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Header::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .filesync.PackageType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::filesync::PackageType_IsValid(val))) {
            _internal_set_type(static_cast<::filesync::PackageType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // required .filesync.Command command = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::filesync::Command_IsValid(val))) {
            _internal_set_command(static_cast<::filesync::Command>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // required int32 headerContentLen = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_headercontentlen(&has_bits);
          headercontentlen_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .filesync.HeaderContentType contentType = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::filesync::HeaderContentType_IsValid(val))) {
            _internal_set_contenttype(static_cast<::filesync::HeaderContentType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .filesync.DepositeFileHeader depositeFileHeader = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_depositefileheader(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .filesync.DepositeState depositeStateHeader = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::filesync::DepositeState_IsValid(val))) {
            _internal_set_depositestateheader(static_cast<::filesync::DepositeState>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(6, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Header::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:filesync.Header)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .filesync.PackageType type = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // required .filesync.Command command = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_command(), target);
  }

  // required int32 headerContentLen = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_headercontentlen(), target);
  }

  // required .filesync.HeaderContentType contentType = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_contenttype(), target);
  }

  // optional .filesync.DepositeFileHeader depositeFileHeader = 5;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::depositefileheader(this), target, stream);
  }

  // optional .filesync.DepositeState depositeStateHeader = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_depositestateheader(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:filesync.Header)
  return target;
}

size_t Header::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:filesync.Header)
  size_t total_size = 0;

  if (_internal_has_type()) {
    // required .filesync.PackageType type = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (_internal_has_command()) {
    // required .filesync.Command command = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_command());
  }

  if (_internal_has_headercontentlen()) {
    // required int32 headerContentLen = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_headercontentlen());
  }

  if (_internal_has_contenttype()) {
    // required .filesync.HeaderContentType contentType = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_contenttype());
  }

  return total_size;
}
size_t Header::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:filesync.Header)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000001e) ^ 0x0000001e) == 0) {  // All required fields are present.
    // required .filesync.PackageType type = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());

    // required .filesync.Command command = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_command());

    // required int32 headerContentLen = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_headercontentlen());

    // required .filesync.HeaderContentType contentType = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_contenttype());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .filesync.DepositeFileHeader depositeFileHeader = 5;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *depositefileheader_);
  }

  // optional .filesync.DepositeState depositeStateHeader = 6;
  if (cached_has_bits & 0x00000020u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_depositestateheader());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Header::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:filesync.Header)
  GOOGLE_DCHECK_NE(&from, this);
  const Header* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Header>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:filesync.Header)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:filesync.Header)
    MergeFrom(*source);
  }
}

void Header::MergeFrom(const Header& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:filesync.Header)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_depositefileheader()->::filesync::DepositeFileHeader::MergeFrom(from._internal_depositefileheader());
    }
    if (cached_has_bits & 0x00000002u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000004u) {
      command_ = from.command_;
    }
    if (cached_has_bits & 0x00000008u) {
      headercontentlen_ = from.headercontentlen_;
    }
    if (cached_has_bits & 0x00000010u) {
      contenttype_ = from.contenttype_;
    }
    if (cached_has_bits & 0x00000020u) {
      depositestateheader_ = from.depositestateheader_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Header::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:filesync.Header)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Header::CopyFrom(const Header& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:filesync.Header)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Header::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001e) != 0x0000001e) return false;
  if (_internal_has_depositefileheader()) {
    if (!depositefileheader_->IsInitialized()) return false;
  }
  return true;
}

void Header::InternalSwap(Header* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(depositefileheader_, other->depositefileheader_);
  swap(type_, other->type_);
  swap(command_, other->command_);
  swap(headercontentlen_, other->headercontentlen_);
  swap(contenttype_, other->contenttype_);
  swap(depositestateheader_, other->depositestateheader_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Header::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DepositeFileHeader::InitAsDefaultInstance() {
}
class DepositeFileHeader::_Internal {
 public:
  using HasBits = decltype(std::declval<DepositeFileHeader>()._has_bits_);
  static void set_has_filename(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_filelen(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_curseqstart(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_curseqend(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

DepositeFileHeader::DepositeFileHeader()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:filesync.DepositeFileHeader)
}
DepositeFileHeader::DepositeFileHeader(const DepositeFileHeader& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_filename()) {
    filename_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.filename_);
  }
  ::memcpy(&filelen_, &from.filelen_,
    static_cast<size_t>(reinterpret_cast<char*>(&curseqend_) -
    reinterpret_cast<char*>(&filelen_)) + sizeof(curseqend_));
  // @@protoc_insertion_point(copy_constructor:filesync.DepositeFileHeader)
}

void DepositeFileHeader::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DepositeFileHeader_sync_5fmess_2eproto.base);
  filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&filelen_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&curseqend_) -
      reinterpret_cast<char*>(&filelen_)) + sizeof(curseqend_));
}

DepositeFileHeader::~DepositeFileHeader() {
  // @@protoc_insertion_point(destructor:filesync.DepositeFileHeader)
  SharedDtor();
}

void DepositeFileHeader::SharedDtor() {
  filename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DepositeFileHeader::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DepositeFileHeader& DepositeFileHeader::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DepositeFileHeader_sync_5fmess_2eproto.base);
  return *internal_default_instance();
}


void DepositeFileHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:filesync.DepositeFileHeader)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    filename_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&filelen_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&curseqend_) -
        reinterpret_cast<char*>(&filelen_)) + sizeof(curseqend_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* DepositeFileHeader::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string fileName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_filename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "filesync.DepositeFileHeader.fileName");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int64 fileLen = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_filelen(&has_bits);
          filelen_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int64 curSeqStart = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_curseqstart(&has_bits);
          curseqstart_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int64 curSeqEnd = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_curseqend(&has_bits);
          curseqend_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DepositeFileHeader::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:filesync.DepositeFileHeader)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string fileName = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_filename().data(), static_cast<int>(this->_internal_filename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "filesync.DepositeFileHeader.fileName");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_filename(), target);
  }

  // required int64 fileLen = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_filelen(), target);
  }

  // required int64 curSeqStart = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_curseqstart(), target);
  }

  // required int64 curSeqEnd = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_curseqend(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:filesync.DepositeFileHeader)
  return target;
}

size_t DepositeFileHeader::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:filesync.DepositeFileHeader)
  size_t total_size = 0;

  if (_internal_has_filename()) {
    // required string fileName = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_filename());
  }

  if (_internal_has_filelen()) {
    // required int64 fileLen = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_filelen());
  }

  if (_internal_has_curseqstart()) {
    // required int64 curSeqStart = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_curseqstart());
  }

  if (_internal_has_curseqend()) {
    // required int64 curSeqEnd = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_curseqend());
  }

  return total_size;
}
size_t DepositeFileHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:filesync.DepositeFileHeader)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required string fileName = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_filename());

    // required int64 fileLen = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_filelen());

    // required int64 curSeqStart = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_curseqstart());

    // required int64 curSeqEnd = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_curseqend());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DepositeFileHeader::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:filesync.DepositeFileHeader)
  GOOGLE_DCHECK_NE(&from, this);
  const DepositeFileHeader* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DepositeFileHeader>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:filesync.DepositeFileHeader)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:filesync.DepositeFileHeader)
    MergeFrom(*source);
  }
}

void DepositeFileHeader::MergeFrom(const DepositeFileHeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:filesync.DepositeFileHeader)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      filename_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.filename_);
    }
    if (cached_has_bits & 0x00000002u) {
      filelen_ = from.filelen_;
    }
    if (cached_has_bits & 0x00000004u) {
      curseqstart_ = from.curseqstart_;
    }
    if (cached_has_bits & 0x00000008u) {
      curseqend_ = from.curseqend_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DepositeFileHeader::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:filesync.DepositeFileHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DepositeFileHeader::CopyFrom(const DepositeFileHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:filesync.DepositeFileHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DepositeFileHeader::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  return true;
}

void DepositeFileHeader::InternalSwap(DepositeFileHeader* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  filename_.Swap(&other->filename_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(filelen_, other->filelen_);
  swap(curseqstart_, other->curseqstart_);
  swap(curseqend_, other->curseqend_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DepositeFileHeader::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SyncPackage::InitAsDefaultInstance() {
  ::filesync::_SyncPackage_default_instance_._instance.get_mutable()->header_ = const_cast< ::filesync::Header*>(
      ::filesync::Header::internal_default_instance());
}
class SyncPackage::_Internal {
 public:
  using HasBits = decltype(std::declval<SyncPackage>()._has_bits_);
  static void set_has_len(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::filesync::Header& header(const SyncPackage* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_contentlen(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_content(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::filesync::Header&
SyncPackage::_Internal::header(const SyncPackage* msg) {
  return *msg->header_;
}
SyncPackage::SyncPackage()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:filesync.SyncPackage)
}
SyncPackage::SyncPackage(const SyncPackage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_content()) {
    content_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.content_);
  }
  if (from._internal_has_header()) {
    header_ = new ::filesync::Header(*from.header_);
  } else {
    header_ = nullptr;
  }
  ::memcpy(&len_, &from.len_,
    static_cast<size_t>(reinterpret_cast<char*>(&contentlen_) -
    reinterpret_cast<char*>(&len_)) + sizeof(contentlen_));
  // @@protoc_insertion_point(copy_constructor:filesync.SyncPackage)
}

void SyncPackage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SyncPackage_sync_5fmess_2eproto.base);
  content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&contentlen_) -
      reinterpret_cast<char*>(&header_)) + sizeof(contentlen_));
}

SyncPackage::~SyncPackage() {
  // @@protoc_insertion_point(destructor:filesync.SyncPackage)
  SharedDtor();
}

void SyncPackage::SharedDtor() {
  content_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete header_;
}

void SyncPackage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SyncPackage& SyncPackage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SyncPackage_sync_5fmess_2eproto.base);
  return *internal_default_instance();
}


void SyncPackage::Clear() {
// @@protoc_insertion_point(message_clear_start:filesync.SyncPackage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      content_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(header_ != nullptr);
      header_->Clear();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&len_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&contentlen_) -
        reinterpret_cast<char*>(&len_)) + sizeof(contentlen_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* SyncPackage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int64 len = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_len(&has_bits);
          len_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .filesync.Header header = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int64 contentLen = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_contentlen(&has_bits);
          contentlen_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bytes content = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_content();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SyncPackage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:filesync.SyncPackage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 len = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_len(), target);
  }

  // required .filesync.Header header = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::header(this), target, stream);
  }

  // required int64 contentLen = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_contentlen(), target);
  }

  // required bytes content = 4;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_content(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:filesync.SyncPackage)
  return target;
}

size_t SyncPackage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:filesync.SyncPackage)
  size_t total_size = 0;

  if (_internal_has_content()) {
    // required bytes content = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_content());
  }

  if (_internal_has_header()) {
    // required .filesync.Header header = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  if (_internal_has_len()) {
    // required int64 len = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_len());
  }

  if (_internal_has_contentlen()) {
    // required int64 contentLen = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_contentlen());
  }

  return total_size;
}
size_t SyncPackage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:filesync.SyncPackage)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required bytes content = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_content());

    // required .filesync.Header header = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);

    // required int64 len = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_len());

    // required int64 contentLen = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_contentlen());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SyncPackage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:filesync.SyncPackage)
  GOOGLE_DCHECK_NE(&from, this);
  const SyncPackage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SyncPackage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:filesync.SyncPackage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:filesync.SyncPackage)
    MergeFrom(*source);
  }
}

void SyncPackage::MergeFrom(const SyncPackage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:filesync.SyncPackage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      content_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.content_);
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_header()->::filesync::Header::MergeFrom(from._internal_header());
    }
    if (cached_has_bits & 0x00000004u) {
      len_ = from.len_;
    }
    if (cached_has_bits & 0x00000008u) {
      contentlen_ = from.contentlen_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SyncPackage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:filesync.SyncPackage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SyncPackage::CopyFrom(const SyncPackage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:filesync.SyncPackage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SyncPackage::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  if (_internal_has_header()) {
    if (!header_->IsInitialized()) return false;
  }
  return true;
}

void SyncPackage::InternalSwap(SyncPackage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  content_.Swap(&other->content_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(header_, other->header_);
  swap(len_, other->len_);
  swap(contentlen_, other->contentlen_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SyncPackage::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace filesync
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::filesync::Header* Arena::CreateMaybeMessage< ::filesync::Header >(Arena* arena) {
  return Arena::CreateInternal< ::filesync::Header >(arena);
}
template<> PROTOBUF_NOINLINE ::filesync::DepositeFileHeader* Arena::CreateMaybeMessage< ::filesync::DepositeFileHeader >(Arena* arena) {
  return Arena::CreateInternal< ::filesync::DepositeFileHeader >(arena);
}
template<> PROTOBUF_NOINLINE ::filesync::SyncPackage* Arena::CreateMaybeMessage< ::filesync::SyncPackage >(Arena* arena) {
  return Arena::CreateInternal< ::filesync::SyncPackage >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

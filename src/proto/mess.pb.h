// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mess.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_mess_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_mess_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_mess_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_mess_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_mess_2eproto;
namespace downloadmessage {
class Mess;
class MessDefaultTypeInternal;
extern MessDefaultTypeInternal _Mess_default_instance_;
}  // namespace downloadmessage
PROTOBUF_NAMESPACE_OPEN
template<> ::downloadmessage::Mess* Arena::CreateMaybeMessage<::downloadmessage::Mess>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace downloadmessage {

enum Mess_Command : int {
  Mess_Command_DOWNLOAD = 0,
  Mess_Command_PAUSE = 1,
  Mess_Command_RESUME = 2,
  Mess_Command_REMOVE = 3
};
bool Mess_Command_IsValid(int value);
constexpr Mess_Command Mess_Command_Command_MIN = Mess_Command_DOWNLOAD;
constexpr Mess_Command Mess_Command_Command_MAX = Mess_Command_REMOVE;
constexpr int Mess_Command_Command_ARRAYSIZE = Mess_Command_Command_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Mess_Command_descriptor();
template<typename T>
inline const std::string& Mess_Command_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Mess_Command>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Mess_Command_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Mess_Command_descriptor(), enum_t_value);
}
inline bool Mess_Command_Parse(
    const std::string& name, Mess_Command* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Mess_Command>(
    Mess_Command_descriptor(), name, value);
}
// ===================================================================

class Mess :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:downloadmessage.Mess) */ {
 public:
  Mess();
  virtual ~Mess();

  Mess(const Mess& from);
  Mess(Mess&& from) noexcept
    : Mess() {
    *this = ::std::move(from);
  }

  inline Mess& operator=(const Mess& from) {
    CopyFrom(from);
    return *this;
  }
  inline Mess& operator=(Mess&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Mess& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Mess* internal_default_instance() {
    return reinterpret_cast<const Mess*>(
               &_Mess_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Mess& a, Mess& b) {
    a.Swap(&b);
  }
  inline void Swap(Mess* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Mess* New() const final {
    return CreateMaybeMessage<Mess>(nullptr);
  }

  Mess* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Mess>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Mess& from);
  void MergeFrom(const Mess& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Mess* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "downloadmessage.Mess";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mess_2eproto);
    return ::descriptor_table_mess_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Mess_Command Command;
  static constexpr Command DOWNLOAD =
    Mess_Command_DOWNLOAD;
  static constexpr Command PAUSE =
    Mess_Command_PAUSE;
  static constexpr Command RESUME =
    Mess_Command_RESUME;
  static constexpr Command REMOVE =
    Mess_Command_REMOVE;
  static inline bool Command_IsValid(int value) {
    return Mess_Command_IsValid(value);
  }
  static constexpr Command Command_MIN =
    Mess_Command_Command_MIN;
  static constexpr Command Command_MAX =
    Mess_Command_Command_MAX;
  static constexpr int Command_ARRAYSIZE =
    Mess_Command_Command_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Command_descriptor() {
    return Mess_Command_descriptor();
  }
  template<typename T>
  static inline const std::string& Command_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Command>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Command_Name.");
    return Mess_Command_Name(enum_t_value);
  }
  static inline bool Command_Parse(const std::string& name,
      Command* value) {
    return Mess_Command_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kUrlFieldNumber = 4,
    kIdFieldNumber = 2,
    kCommandFieldNumber = 3,
  };
  // required string url = 4;
  bool has_url() const;
  private:
  bool _internal_has_url() const;
  public:
  void clear_url();
  const std::string& url() const;
  void set_url(const std::string& value);
  void set_url(std::string&& value);
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  std::string* mutable_url();
  std::string* release_url();
  void set_allocated_url(std::string* url);
  private:
  const std::string& _internal_url() const;
  void _internal_set_url(const std::string& value);
  std::string* _internal_mutable_url();
  public:

  // required int32 id = 2;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required .downloadmessage.Mess.Command command = 3;
  bool has_command() const;
  private:
  bool _internal_has_command() const;
  public:
  void clear_command();
  ::downloadmessage::Mess_Command command() const;
  void set_command(::downloadmessage::Mess_Command value);
  private:
  ::downloadmessage::Mess_Command _internal_command() const;
  void _internal_set_command(::downloadmessage::Mess_Command value);
  public:

  // @@protoc_insertion_point(class_scope:downloadmessage.Mess)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  int command_;
  friend struct ::TableStruct_mess_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Mess

// required int32 id = 2;
inline bool Mess::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Mess::has_id() const {
  return _internal_has_id();
}
inline void Mess::clear_id() {
  id_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Mess::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Mess::id() const {
  // @@protoc_insertion_point(field_get:downloadmessage.Mess.id)
  return _internal_id();
}
inline void Mess::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  id_ = value;
}
inline void Mess::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:downloadmessage.Mess.id)
}

// required .downloadmessage.Mess.Command command = 3;
inline bool Mess::_internal_has_command() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Mess::has_command() const {
  return _internal_has_command();
}
inline void Mess::clear_command() {
  command_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::downloadmessage::Mess_Command Mess::_internal_command() const {
  return static_cast< ::downloadmessage::Mess_Command >(command_);
}
inline ::downloadmessage::Mess_Command Mess::command() const {
  // @@protoc_insertion_point(field_get:downloadmessage.Mess.command)
  return _internal_command();
}
inline void Mess::_internal_set_command(::downloadmessage::Mess_Command value) {
  assert(::downloadmessage::Mess_Command_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  command_ = value;
}
inline void Mess::set_command(::downloadmessage::Mess_Command value) {
  _internal_set_command(value);
  // @@protoc_insertion_point(field_set:downloadmessage.Mess.command)
}

// required string url = 4;
inline bool Mess::_internal_has_url() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Mess::has_url() const {
  return _internal_has_url();
}
inline void Mess::clear_url() {
  url_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Mess::url() const {
  // @@protoc_insertion_point(field_get:downloadmessage.Mess.url)
  return _internal_url();
}
inline void Mess::set_url(const std::string& value) {
  _internal_set_url(value);
  // @@protoc_insertion_point(field_set:downloadmessage.Mess.url)
}
inline std::string* Mess::mutable_url() {
  // @@protoc_insertion_point(field_mutable:downloadmessage.Mess.url)
  return _internal_mutable_url();
}
inline const std::string& Mess::_internal_url() const {
  return url_.GetNoArena();
}
inline void Mess::_internal_set_url(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Mess::set_url(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  url_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:downloadmessage.Mess.url)
}
inline void Mess::set_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:downloadmessage.Mess.url)
}
inline void Mess::set_url(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:downloadmessage.Mess.url)
}
inline std::string* Mess::_internal_mutable_url() {
  _has_bits_[0] |= 0x00000001u;
  return url_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Mess::release_url() {
  // @@protoc_insertion_point(field_release:downloadmessage.Mess.url)
  if (!_internal_has_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return url_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Mess::set_allocated_url(std::string* url) {
  if (url != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  url_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:downloadmessage.Mess.url)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace downloadmessage

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::downloadmessage::Mess_Command> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::downloadmessage::Mess_Command>() {
  return ::downloadmessage::Mess_Command_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_mess_2eproto

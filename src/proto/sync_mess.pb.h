// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sync_mess.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_sync_5fmess_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_sync_5fmess_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_sync_5fmess_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_sync_5fmess_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_sync_5fmess_2eproto;
namespace filesync {
class DepositeFileHeader;
class DepositeFileHeaderDefaultTypeInternal;
extern DepositeFileHeaderDefaultTypeInternal _DepositeFileHeader_default_instance_;
class Header;
class HeaderDefaultTypeInternal;
extern HeaderDefaultTypeInternal _Header_default_instance_;
class SyncPackage;
class SyncPackageDefaultTypeInternal;
extern SyncPackageDefaultTypeInternal _SyncPackage_default_instance_;
}  // namespace filesync
PROTOBUF_NAMESPACE_OPEN
template<> ::filesync::DepositeFileHeader* Arena::CreateMaybeMessage<::filesync::DepositeFileHeader>(Arena*);
template<> ::filesync::Header* Arena::CreateMaybeMessage<::filesync::Header>(Arena*);
template<> ::filesync::SyncPackage* Arena::CreateMaybeMessage<::filesync::SyncPackage>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace filesync {

enum PackageType : int {
  Client = 0,
  Server = 1
};
bool PackageType_IsValid(int value);
constexpr PackageType PackageType_MIN = Client;
constexpr PackageType PackageType_MAX = Server;
constexpr int PackageType_ARRAYSIZE = PackageType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PackageType_descriptor();
template<typename T>
inline const std::string& PackageType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PackageType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PackageType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PackageType_descriptor(), enum_t_value);
}
inline bool PackageType_Parse(
    const std::string& name, PackageType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PackageType>(
    PackageType_descriptor(), name, value);
}
enum Command : int {
  ClientHello = 0,
  ServerHello = 1,
  DepositeFile = 2,
  ReportState = 3
};
bool Command_IsValid(int value);
constexpr Command Command_MIN = ClientHello;
constexpr Command Command_MAX = ReportState;
constexpr int Command_ARRAYSIZE = Command_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Command_descriptor();
template<typename T>
inline const std::string& Command_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Command>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Command_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Command_descriptor(), enum_t_value);
}
inline bool Command_Parse(
    const std::string& name, Command* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Command>(
    Command_descriptor(), name, value);
}
enum HeaderContentType : int {
  None = 0,
  DepositeFileContent = 1,
  DepositeStateContent = 2
};
bool HeaderContentType_IsValid(int value);
constexpr HeaderContentType HeaderContentType_MIN = None;
constexpr HeaderContentType HeaderContentType_MAX = DepositeStateContent;
constexpr int HeaderContentType_ARRAYSIZE = HeaderContentType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* HeaderContentType_descriptor();
template<typename T>
inline const std::string& HeaderContentType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, HeaderContentType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function HeaderContentType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    HeaderContentType_descriptor(), enum_t_value);
}
inline bool HeaderContentType_Parse(
    const std::string& name, HeaderContentType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<HeaderContentType>(
    HeaderContentType_descriptor(), name, value);
}
enum DepositeState : int {
  Succeed = 0,
  Failed = 1,
  Paused = 2
};
bool DepositeState_IsValid(int value);
constexpr DepositeState DepositeState_MIN = Succeed;
constexpr DepositeState DepositeState_MAX = Paused;
constexpr int DepositeState_ARRAYSIZE = DepositeState_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DepositeState_descriptor();
template<typename T>
inline const std::string& DepositeState_Name(T enum_t_value) {
  static_assert(::std::is_same<T, DepositeState>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function DepositeState_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    DepositeState_descriptor(), enum_t_value);
}
inline bool DepositeState_Parse(
    const std::string& name, DepositeState* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<DepositeState>(
    DepositeState_descriptor(), name, value);
}
// ===================================================================

class Header :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:filesync.Header) */ {
 public:
  Header();
  virtual ~Header();

  Header(const Header& from);
  Header(Header&& from) noexcept
    : Header() {
    *this = ::std::move(from);
  }

  inline Header& operator=(const Header& from) {
    CopyFrom(from);
    return *this;
  }
  inline Header& operator=(Header&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Header& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Header* internal_default_instance() {
    return reinterpret_cast<const Header*>(
               &_Header_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Header& a, Header& b) {
    a.Swap(&b);
  }
  inline void Swap(Header* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Header* New() const final {
    return CreateMaybeMessage<Header>(nullptr);
  }

  Header* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Header>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Header& from);
  void MergeFrom(const Header& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Header* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "filesync.Header";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_sync_5fmess_2eproto);
    return ::descriptor_table_sync_5fmess_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDepositeFileHeaderFieldNumber = 5,
    kTypeFieldNumber = 1,
    kCommandFieldNumber = 2,
    kHeaderContentLenFieldNumber = 3,
    kContentTypeFieldNumber = 4,
    kDepositeStateHeaderFieldNumber = 6,
  };
  // optional .filesync.DepositeFileHeader depositeFileHeader = 5;
  bool has_depositefileheader() const;
  private:
  bool _internal_has_depositefileheader() const;
  public:
  void clear_depositefileheader();
  const ::filesync::DepositeFileHeader& depositefileheader() const;
  ::filesync::DepositeFileHeader* release_depositefileheader();
  ::filesync::DepositeFileHeader* mutable_depositefileheader();
  void set_allocated_depositefileheader(::filesync::DepositeFileHeader* depositefileheader);
  private:
  const ::filesync::DepositeFileHeader& _internal_depositefileheader() const;
  ::filesync::DepositeFileHeader* _internal_mutable_depositefileheader();
  public:

  // required .filesync.PackageType type = 1;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::filesync::PackageType type() const;
  void set_type(::filesync::PackageType value);
  private:
  ::filesync::PackageType _internal_type() const;
  void _internal_set_type(::filesync::PackageType value);
  public:

  // required .filesync.Command command = 2;
  bool has_command() const;
  private:
  bool _internal_has_command() const;
  public:
  void clear_command();
  ::filesync::Command command() const;
  void set_command(::filesync::Command value);
  private:
  ::filesync::Command _internal_command() const;
  void _internal_set_command(::filesync::Command value);
  public:

  // required int32 headerContentLen = 3;
  bool has_headercontentlen() const;
  private:
  bool _internal_has_headercontentlen() const;
  public:
  void clear_headercontentlen();
  ::PROTOBUF_NAMESPACE_ID::int32 headercontentlen() const;
  void set_headercontentlen(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_headercontentlen() const;
  void _internal_set_headercontentlen(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required .filesync.HeaderContentType contentType = 4;
  bool has_contenttype() const;
  private:
  bool _internal_has_contenttype() const;
  public:
  void clear_contenttype();
  ::filesync::HeaderContentType contenttype() const;
  void set_contenttype(::filesync::HeaderContentType value);
  private:
  ::filesync::HeaderContentType _internal_contenttype() const;
  void _internal_set_contenttype(::filesync::HeaderContentType value);
  public:

  // optional .filesync.DepositeState depositeStateHeader = 6;
  bool has_depositestateheader() const;
  private:
  bool _internal_has_depositestateheader() const;
  public:
  void clear_depositestateheader();
  ::filesync::DepositeState depositestateheader() const;
  void set_depositestateheader(::filesync::DepositeState value);
  private:
  ::filesync::DepositeState _internal_depositestateheader() const;
  void _internal_set_depositestateheader(::filesync::DepositeState value);
  public:

  // @@protoc_insertion_point(class_scope:filesync.Header)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::filesync::DepositeFileHeader* depositefileheader_;
  int type_;
  int command_;
  ::PROTOBUF_NAMESPACE_ID::int32 headercontentlen_;
  int contenttype_;
  int depositestateheader_;
  friend struct ::TableStruct_sync_5fmess_2eproto;
};
// -------------------------------------------------------------------

class DepositeFileHeader :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:filesync.DepositeFileHeader) */ {
 public:
  DepositeFileHeader();
  virtual ~DepositeFileHeader();

  DepositeFileHeader(const DepositeFileHeader& from);
  DepositeFileHeader(DepositeFileHeader&& from) noexcept
    : DepositeFileHeader() {
    *this = ::std::move(from);
  }

  inline DepositeFileHeader& operator=(const DepositeFileHeader& from) {
    CopyFrom(from);
    return *this;
  }
  inline DepositeFileHeader& operator=(DepositeFileHeader&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DepositeFileHeader& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DepositeFileHeader* internal_default_instance() {
    return reinterpret_cast<const DepositeFileHeader*>(
               &_DepositeFileHeader_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(DepositeFileHeader& a, DepositeFileHeader& b) {
    a.Swap(&b);
  }
  inline void Swap(DepositeFileHeader* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DepositeFileHeader* New() const final {
    return CreateMaybeMessage<DepositeFileHeader>(nullptr);
  }

  DepositeFileHeader* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DepositeFileHeader>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DepositeFileHeader& from);
  void MergeFrom(const DepositeFileHeader& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DepositeFileHeader* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "filesync.DepositeFileHeader";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_sync_5fmess_2eproto);
    return ::descriptor_table_sync_5fmess_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFileNameFieldNumber = 1,
    kFileLenFieldNumber = 2,
    kCurSeqStartFieldNumber = 3,
    kCurSeqEndFieldNumber = 4,
  };
  // required string fileName = 1;
  bool has_filename() const;
  private:
  bool _internal_has_filename() const;
  public:
  void clear_filename();
  const std::string& filename() const;
  void set_filename(const std::string& value);
  void set_filename(std::string&& value);
  void set_filename(const char* value);
  void set_filename(const char* value, size_t size);
  std::string* mutable_filename();
  std::string* release_filename();
  void set_allocated_filename(std::string* filename);
  private:
  const std::string& _internal_filename() const;
  void _internal_set_filename(const std::string& value);
  std::string* _internal_mutable_filename();
  public:

  // required int64 fileLen = 2;
  bool has_filelen() const;
  private:
  bool _internal_has_filelen() const;
  public:
  void clear_filelen();
  ::PROTOBUF_NAMESPACE_ID::int64 filelen() const;
  void set_filelen(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_filelen() const;
  void _internal_set_filelen(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // required int64 curSeqStart = 3;
  bool has_curseqstart() const;
  private:
  bool _internal_has_curseqstart() const;
  public:
  void clear_curseqstart();
  ::PROTOBUF_NAMESPACE_ID::int64 curseqstart() const;
  void set_curseqstart(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_curseqstart() const;
  void _internal_set_curseqstart(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // required int64 curSeqEnd = 4;
  bool has_curseqend() const;
  private:
  bool _internal_has_curseqend() const;
  public:
  void clear_curseqend();
  ::PROTOBUF_NAMESPACE_ID::int64 curseqend() const;
  void set_curseqend(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_curseqend() const;
  void _internal_set_curseqend(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:filesync.DepositeFileHeader)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr filename_;
  ::PROTOBUF_NAMESPACE_ID::int64 filelen_;
  ::PROTOBUF_NAMESPACE_ID::int64 curseqstart_;
  ::PROTOBUF_NAMESPACE_ID::int64 curseqend_;
  friend struct ::TableStruct_sync_5fmess_2eproto;
};
// -------------------------------------------------------------------

class SyncPackage :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:filesync.SyncPackage) */ {
 public:
  SyncPackage();
  virtual ~SyncPackage();

  SyncPackage(const SyncPackage& from);
  SyncPackage(SyncPackage&& from) noexcept
    : SyncPackage() {
    *this = ::std::move(from);
  }

  inline SyncPackage& operator=(const SyncPackage& from) {
    CopyFrom(from);
    return *this;
  }
  inline SyncPackage& operator=(SyncPackage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SyncPackage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SyncPackage* internal_default_instance() {
    return reinterpret_cast<const SyncPackage*>(
               &_SyncPackage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SyncPackage& a, SyncPackage& b) {
    a.Swap(&b);
  }
  inline void Swap(SyncPackage* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SyncPackage* New() const final {
    return CreateMaybeMessage<SyncPackage>(nullptr);
  }

  SyncPackage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SyncPackage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SyncPackage& from);
  void MergeFrom(const SyncPackage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SyncPackage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "filesync.SyncPackage";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_sync_5fmess_2eproto);
    return ::descriptor_table_sync_5fmess_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContentFieldNumber = 4,
    kHeaderFieldNumber = 2,
    kLenFieldNumber = 1,
    kContentLenFieldNumber = 3,
  };
  // required bytes content = 4;
  bool has_content() const;
  private:
  bool _internal_has_content() const;
  public:
  void clear_content();
  const std::string& content() const;
  void set_content(const std::string& value);
  void set_content(std::string&& value);
  void set_content(const char* value);
  void set_content(const void* value, size_t size);
  std::string* mutable_content();
  std::string* release_content();
  void set_allocated_content(std::string* content);
  private:
  const std::string& _internal_content() const;
  void _internal_set_content(const std::string& value);
  std::string* _internal_mutable_content();
  public:

  // required .filesync.Header header = 2;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::filesync::Header& header() const;
  ::filesync::Header* release_header();
  ::filesync::Header* mutable_header();
  void set_allocated_header(::filesync::Header* header);
  private:
  const ::filesync::Header& _internal_header() const;
  ::filesync::Header* _internal_mutable_header();
  public:

  // required int64 len = 1;
  bool has_len() const;
  private:
  bool _internal_has_len() const;
  public:
  void clear_len();
  ::PROTOBUF_NAMESPACE_ID::int64 len() const;
  void set_len(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_len() const;
  void _internal_set_len(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // required int64 contentLen = 3;
  bool has_contentlen() const;
  private:
  bool _internal_has_contentlen() const;
  public:
  void clear_contentlen();
  ::PROTOBUF_NAMESPACE_ID::int64 contentlen() const;
  void set_contentlen(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_contentlen() const;
  void _internal_set_contentlen(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:filesync.SyncPackage)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
  ::filesync::Header* header_;
  ::PROTOBUF_NAMESPACE_ID::int64 len_;
  ::PROTOBUF_NAMESPACE_ID::int64 contentlen_;
  friend struct ::TableStruct_sync_5fmess_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Header

// required .filesync.PackageType type = 1;
inline bool Header::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Header::has_type() const {
  return _internal_has_type();
}
inline void Header::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::filesync::PackageType Header::_internal_type() const {
  return static_cast< ::filesync::PackageType >(type_);
}
inline ::filesync::PackageType Header::type() const {
  // @@protoc_insertion_point(field_get:filesync.Header.type)
  return _internal_type();
}
inline void Header::_internal_set_type(::filesync::PackageType value) {
  assert(::filesync::PackageType_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  type_ = value;
}
inline void Header::set_type(::filesync::PackageType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:filesync.Header.type)
}

// required .filesync.Command command = 2;
inline bool Header::_internal_has_command() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Header::has_command() const {
  return _internal_has_command();
}
inline void Header::clear_command() {
  command_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::filesync::Command Header::_internal_command() const {
  return static_cast< ::filesync::Command >(command_);
}
inline ::filesync::Command Header::command() const {
  // @@protoc_insertion_point(field_get:filesync.Header.command)
  return _internal_command();
}
inline void Header::_internal_set_command(::filesync::Command value) {
  assert(::filesync::Command_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  command_ = value;
}
inline void Header::set_command(::filesync::Command value) {
  _internal_set_command(value);
  // @@protoc_insertion_point(field_set:filesync.Header.command)
}

// required int32 headerContentLen = 3;
inline bool Header::_internal_has_headercontentlen() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Header::has_headercontentlen() const {
  return _internal_has_headercontentlen();
}
inline void Header::clear_headercontentlen() {
  headercontentlen_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Header::_internal_headercontentlen() const {
  return headercontentlen_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Header::headercontentlen() const {
  // @@protoc_insertion_point(field_get:filesync.Header.headerContentLen)
  return _internal_headercontentlen();
}
inline void Header::_internal_set_headercontentlen(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  headercontentlen_ = value;
}
inline void Header::set_headercontentlen(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_headercontentlen(value);
  // @@protoc_insertion_point(field_set:filesync.Header.headerContentLen)
}

// required .filesync.HeaderContentType contentType = 4;
inline bool Header::_internal_has_contenttype() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Header::has_contenttype() const {
  return _internal_has_contenttype();
}
inline void Header::clear_contenttype() {
  contenttype_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::filesync::HeaderContentType Header::_internal_contenttype() const {
  return static_cast< ::filesync::HeaderContentType >(contenttype_);
}
inline ::filesync::HeaderContentType Header::contenttype() const {
  // @@protoc_insertion_point(field_get:filesync.Header.contentType)
  return _internal_contenttype();
}
inline void Header::_internal_set_contenttype(::filesync::HeaderContentType value) {
  assert(::filesync::HeaderContentType_IsValid(value));
  _has_bits_[0] |= 0x00000010u;
  contenttype_ = value;
}
inline void Header::set_contenttype(::filesync::HeaderContentType value) {
  _internal_set_contenttype(value);
  // @@protoc_insertion_point(field_set:filesync.Header.contentType)
}

// optional .filesync.DepositeFileHeader depositeFileHeader = 5;
inline bool Header::_internal_has_depositefileheader() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || depositefileheader_ != nullptr);
  return value;
}
inline bool Header::has_depositefileheader() const {
  return _internal_has_depositefileheader();
}
inline void Header::clear_depositefileheader() {
  if (depositefileheader_ != nullptr) depositefileheader_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::filesync::DepositeFileHeader& Header::_internal_depositefileheader() const {
  const ::filesync::DepositeFileHeader* p = depositefileheader_;
  return p != nullptr ? *p : *reinterpret_cast<const ::filesync::DepositeFileHeader*>(
      &::filesync::_DepositeFileHeader_default_instance_);
}
inline const ::filesync::DepositeFileHeader& Header::depositefileheader() const {
  // @@protoc_insertion_point(field_get:filesync.Header.depositeFileHeader)
  return _internal_depositefileheader();
}
inline ::filesync::DepositeFileHeader* Header::release_depositefileheader() {
  // @@protoc_insertion_point(field_release:filesync.Header.depositeFileHeader)
  _has_bits_[0] &= ~0x00000001u;
  ::filesync::DepositeFileHeader* temp = depositefileheader_;
  depositefileheader_ = nullptr;
  return temp;
}
inline ::filesync::DepositeFileHeader* Header::_internal_mutable_depositefileheader() {
  _has_bits_[0] |= 0x00000001u;
  if (depositefileheader_ == nullptr) {
    auto* p = CreateMaybeMessage<::filesync::DepositeFileHeader>(GetArenaNoVirtual());
    depositefileheader_ = p;
  }
  return depositefileheader_;
}
inline ::filesync::DepositeFileHeader* Header::mutable_depositefileheader() {
  // @@protoc_insertion_point(field_mutable:filesync.Header.depositeFileHeader)
  return _internal_mutable_depositefileheader();
}
inline void Header::set_allocated_depositefileheader(::filesync::DepositeFileHeader* depositefileheader) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete depositefileheader_;
  }
  if (depositefileheader) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      depositefileheader = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, depositefileheader, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  depositefileheader_ = depositefileheader;
  // @@protoc_insertion_point(field_set_allocated:filesync.Header.depositeFileHeader)
}

// optional .filesync.DepositeState depositeStateHeader = 6;
inline bool Header::_internal_has_depositestateheader() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Header::has_depositestateheader() const {
  return _internal_has_depositestateheader();
}
inline void Header::clear_depositestateheader() {
  depositestateheader_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::filesync::DepositeState Header::_internal_depositestateheader() const {
  return static_cast< ::filesync::DepositeState >(depositestateheader_);
}
inline ::filesync::DepositeState Header::depositestateheader() const {
  // @@protoc_insertion_point(field_get:filesync.Header.depositeStateHeader)
  return _internal_depositestateheader();
}
inline void Header::_internal_set_depositestateheader(::filesync::DepositeState value) {
  assert(::filesync::DepositeState_IsValid(value));
  _has_bits_[0] |= 0x00000020u;
  depositestateheader_ = value;
}
inline void Header::set_depositestateheader(::filesync::DepositeState value) {
  _internal_set_depositestateheader(value);
  // @@protoc_insertion_point(field_set:filesync.Header.depositeStateHeader)
}

// -------------------------------------------------------------------

// DepositeFileHeader

// required string fileName = 1;
inline bool DepositeFileHeader::_internal_has_filename() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DepositeFileHeader::has_filename() const {
  return _internal_has_filename();
}
inline void DepositeFileHeader::clear_filename() {
  filename_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& DepositeFileHeader::filename() const {
  // @@protoc_insertion_point(field_get:filesync.DepositeFileHeader.fileName)
  return _internal_filename();
}
inline void DepositeFileHeader::set_filename(const std::string& value) {
  _internal_set_filename(value);
  // @@protoc_insertion_point(field_set:filesync.DepositeFileHeader.fileName)
}
inline std::string* DepositeFileHeader::mutable_filename() {
  // @@protoc_insertion_point(field_mutable:filesync.DepositeFileHeader.fileName)
  return _internal_mutable_filename();
}
inline const std::string& DepositeFileHeader::_internal_filename() const {
  return filename_.GetNoArena();
}
inline void DepositeFileHeader::_internal_set_filename(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  filename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void DepositeFileHeader::set_filename(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  filename_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:filesync.DepositeFileHeader.fileName)
}
inline void DepositeFileHeader::set_filename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  filename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:filesync.DepositeFileHeader.fileName)
}
inline void DepositeFileHeader::set_filename(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  filename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:filesync.DepositeFileHeader.fileName)
}
inline std::string* DepositeFileHeader::_internal_mutable_filename() {
  _has_bits_[0] |= 0x00000001u;
  return filename_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DepositeFileHeader::release_filename() {
  // @@protoc_insertion_point(field_release:filesync.DepositeFileHeader.fileName)
  if (!_internal_has_filename()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return filename_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DepositeFileHeader::set_allocated_filename(std::string* filename) {
  if (filename != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  filename_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), filename);
  // @@protoc_insertion_point(field_set_allocated:filesync.DepositeFileHeader.fileName)
}

// required int64 fileLen = 2;
inline bool DepositeFileHeader::_internal_has_filelen() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool DepositeFileHeader::has_filelen() const {
  return _internal_has_filelen();
}
inline void DepositeFileHeader::clear_filelen() {
  filelen_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 DepositeFileHeader::_internal_filelen() const {
  return filelen_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 DepositeFileHeader::filelen() const {
  // @@protoc_insertion_point(field_get:filesync.DepositeFileHeader.fileLen)
  return _internal_filelen();
}
inline void DepositeFileHeader::_internal_set_filelen(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  filelen_ = value;
}
inline void DepositeFileHeader::set_filelen(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_filelen(value);
  // @@protoc_insertion_point(field_set:filesync.DepositeFileHeader.fileLen)
}

// required int64 curSeqStart = 3;
inline bool DepositeFileHeader::_internal_has_curseqstart() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool DepositeFileHeader::has_curseqstart() const {
  return _internal_has_curseqstart();
}
inline void DepositeFileHeader::clear_curseqstart() {
  curseqstart_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 DepositeFileHeader::_internal_curseqstart() const {
  return curseqstart_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 DepositeFileHeader::curseqstart() const {
  // @@protoc_insertion_point(field_get:filesync.DepositeFileHeader.curSeqStart)
  return _internal_curseqstart();
}
inline void DepositeFileHeader::_internal_set_curseqstart(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000004u;
  curseqstart_ = value;
}
inline void DepositeFileHeader::set_curseqstart(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_curseqstart(value);
  // @@protoc_insertion_point(field_set:filesync.DepositeFileHeader.curSeqStart)
}

// required int64 curSeqEnd = 4;
inline bool DepositeFileHeader::_internal_has_curseqend() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool DepositeFileHeader::has_curseqend() const {
  return _internal_has_curseqend();
}
inline void DepositeFileHeader::clear_curseqend() {
  curseqend_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 DepositeFileHeader::_internal_curseqend() const {
  return curseqend_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 DepositeFileHeader::curseqend() const {
  // @@protoc_insertion_point(field_get:filesync.DepositeFileHeader.curSeqEnd)
  return _internal_curseqend();
}
inline void DepositeFileHeader::_internal_set_curseqend(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000008u;
  curseqend_ = value;
}
inline void DepositeFileHeader::set_curseqend(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_curseqend(value);
  // @@protoc_insertion_point(field_set:filesync.DepositeFileHeader.curSeqEnd)
}

// -------------------------------------------------------------------

// SyncPackage

// required int64 len = 1;
inline bool SyncPackage::_internal_has_len() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool SyncPackage::has_len() const {
  return _internal_has_len();
}
inline void SyncPackage::clear_len() {
  len_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SyncPackage::_internal_len() const {
  return len_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SyncPackage::len() const {
  // @@protoc_insertion_point(field_get:filesync.SyncPackage.len)
  return _internal_len();
}
inline void SyncPackage::_internal_set_len(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000004u;
  len_ = value;
}
inline void SyncPackage::set_len(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_len(value);
  // @@protoc_insertion_point(field_set:filesync.SyncPackage.len)
}

// required .filesync.Header header = 2;
inline bool SyncPackage::_internal_has_header() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || header_ != nullptr);
  return value;
}
inline bool SyncPackage::has_header() const {
  return _internal_has_header();
}
inline void SyncPackage::clear_header() {
  if (header_ != nullptr) header_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::filesync::Header& SyncPackage::_internal_header() const {
  const ::filesync::Header* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::filesync::Header*>(
      &::filesync::_Header_default_instance_);
}
inline const ::filesync::Header& SyncPackage::header() const {
  // @@protoc_insertion_point(field_get:filesync.SyncPackage.header)
  return _internal_header();
}
inline ::filesync::Header* SyncPackage::release_header() {
  // @@protoc_insertion_point(field_release:filesync.SyncPackage.header)
  _has_bits_[0] &= ~0x00000002u;
  ::filesync::Header* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::filesync::Header* SyncPackage::_internal_mutable_header() {
  _has_bits_[0] |= 0x00000002u;
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::filesync::Header>(GetArenaNoVirtual());
    header_ = p;
  }
  return header_;
}
inline ::filesync::Header* SyncPackage::mutable_header() {
  // @@protoc_insertion_point(field_mutable:filesync.SyncPackage.header)
  return _internal_mutable_header();
}
inline void SyncPackage::set_allocated_header(::filesync::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete header_;
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:filesync.SyncPackage.header)
}

// required int64 contentLen = 3;
inline bool SyncPackage::_internal_has_contentlen() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool SyncPackage::has_contentlen() const {
  return _internal_has_contentlen();
}
inline void SyncPackage::clear_contentlen() {
  contentlen_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SyncPackage::_internal_contentlen() const {
  return contentlen_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SyncPackage::contentlen() const {
  // @@protoc_insertion_point(field_get:filesync.SyncPackage.contentLen)
  return _internal_contentlen();
}
inline void SyncPackage::_internal_set_contentlen(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000008u;
  contentlen_ = value;
}
inline void SyncPackage::set_contentlen(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_contentlen(value);
  // @@protoc_insertion_point(field_set:filesync.SyncPackage.contentLen)
}

// required bytes content = 4;
inline bool SyncPackage::_internal_has_content() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SyncPackage::has_content() const {
  return _internal_has_content();
}
inline void SyncPackage::clear_content() {
  content_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SyncPackage::content() const {
  // @@protoc_insertion_point(field_get:filesync.SyncPackage.content)
  return _internal_content();
}
inline void SyncPackage::set_content(const std::string& value) {
  _internal_set_content(value);
  // @@protoc_insertion_point(field_set:filesync.SyncPackage.content)
}
inline std::string* SyncPackage::mutable_content() {
  // @@protoc_insertion_point(field_mutable:filesync.SyncPackage.content)
  return _internal_mutable_content();
}
inline const std::string& SyncPackage::_internal_content() const {
  return content_.GetNoArena();
}
inline void SyncPackage::_internal_set_content(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  content_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SyncPackage::set_content(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  content_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:filesync.SyncPackage.content)
}
inline void SyncPackage::set_content(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  content_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:filesync.SyncPackage.content)
}
inline void SyncPackage::set_content(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  content_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:filesync.SyncPackage.content)
}
inline std::string* SyncPackage::_internal_mutable_content() {
  _has_bits_[0] |= 0x00000001u;
  return content_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SyncPackage::release_content() {
  // @@protoc_insertion_point(field_release:filesync.SyncPackage.content)
  if (!_internal_has_content()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return content_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SyncPackage::set_allocated_content(std::string* content) {
  if (content != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  content_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:filesync.SyncPackage.content)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace filesync

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::filesync::PackageType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::filesync::PackageType>() {
  return ::filesync::PackageType_descriptor();
}
template <> struct is_proto_enum< ::filesync::Command> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::filesync::Command>() {
  return ::filesync::Command_descriptor();
}
template <> struct is_proto_enum< ::filesync::HeaderContentType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::filesync::HeaderContentType>() {
  return ::filesync::HeaderContentType_descriptor();
}
template <> struct is_proto_enum< ::filesync::DepositeState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::filesync::DepositeState>() {
  return ::filesync::DepositeState_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_sync_5fmess_2eproto
